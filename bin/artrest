#!/usr/bin/env ruby
require 'gli'
require 'yaml'
require 'active_support/core_ext/hash/keys'
require 'artrest'

include GLI::App

#
# Global options
#
program_desc 'A command-line interface for Artifactory\'s REST API'

version ArtRest::VERSION

desc 'Artifactory\'s base URL'
default_value 'http://localhost:8081/artifactory'
arg_name 'Artifactory URL'
flag [:h,:host]

desc 'Username used to access Artifactory'
default_value 'admin'
arg_name 'Artifactory user'
flag [:u,:user]

desc 'Password used to access Artifactory'
default_value 'password'
arg_name 'Artifactory password'
flag [:p,:password]

desc 'Configuration file containing default values for all options'
long_desc 'Path to a configuration file containing default values for all global options that may be passed on the command line.

It is intended that global options passed on the command line overwrite corresponding options defined in this configuration file.
This feature is NOT YET IMPLEMENTED!'
default_value File.join(ENV['HOME'], '.artrest.yml')
arg_name 'Configuration file'
flag [:c, :config]

#
# Preprocess commands
#
pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abourt and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    config = load_config_file(global[:config])
    global.merge!(config)
    ArtRest.connect(global[:host], global[:user], global[:password])
end

def load_config_file(filename)
    return {} unless File.exist?(filename)
    YAML.load_file(filename).symbolize_keys
end

#
# Artifactory's system API
#
desc 'Entry point into Artifactory\' system API: info, ping, global configuration'
command :system do |c|

    c.desc 'Print system info to stdout'
    c.long_desc 'Print Artifactory\'s system configuration to stdout. Mainly
     * JVM version
     * JVM command line parameters
     * JVM memory consumption
    '

    c.command :info do |info|
        info.action do |global_options,options,args|
            puts ArtRest.system.unparsed_content.to_s
        end
    end

    c.desc 'Ping Artifactory and print response to stdout'
    c.long_desc 'Issue a ping request to Artifactory and print its response to stdout'

    c.command :ping do |ping|
        ping.action do |global_options,options,args|
            puts ArtRest.system.ping
        end
    end

    c.desc 'Optional file to store configuration in. If not given, configuration will be printed to stdout.'
    c.arg_name 'file'

    c.desc 'Retrieve Artifactory\'s global configuration'
    c.long_desc 'Retrieve Artifactory\'s global configuration and either print it to stdout or store it in a file'

    c.command :config do |config|
        config.action do |global_options,options,args|
            filename = args[0]
            cfg = ArtRest.system.configuration.unparsed_content.to_s
            if filename
                File.open(filename, 'w') { |f| f.write(cfg) }
            else
                puts cfg
            end
        end
    end

    c.default_command :info
end

#
# Artifactory's builds API
#
desc 'Print information about builds to stdout'
command :builds do |c|

    c.desc 'Pretty print output in a format fit to be parsed by mere humans'
    c.switch [:p, :pretty]

    c.desc 'Print a list of all builds to stdout'

    c.command :all do |all|

        all.action do |global_options,options,args|
            puts ArtRest.builds.unparsed_content(options[:pretty] ? :pretty : :plain).to_s
        end
    end

    c.desc 'Name of build to retrieve'
    c.arg_name 'build'

    c.desc 'Print information on named build to stdout'

    c.command :get do |get|

        get.action do |global_options,options,args|
            help_now!('name of build to retrieve is required') if args.empty?
            puts ArtRest.builds[args[0]].unparsed_content(options[:pretty] ? :pretty : :plain).to_s
        end
    end

    c.default_command :all
end

#
# Artifactory's buildnumber API
#
desc 'Print information about buildnumbers to stdout'
command :buildnumber do |c|

    c.desc 'Pretty print output in a format fit to be parsed by mere humans'
    c.switch [:p, :pretty]

    c.desc 'Name of build to retrieve'
    c.arg_name 'build'

    c.desc 'Number of build to retrieve'
    c.arg_name 'buildnumber'

    c.desc 'Print information on named build/buildnumber to stdout'

    c.action do |global_options,options,args|
        help_now!('name of buildnumber to retrieve is required') if args[0].nil?
        help_now!('number of buildnumber to retrieve is required') if args[1].nil?
        puts ArtRest.builds[args[0]][args[1]].unparsed_content(options[:pretty] ? :pretty : :plain).to_s
    end
end
#
# Artifactory's repositories API
#
desc 'Print information about repositories to stdout'
command :repositories do |c|

    c.action do |global_options,options,args|
        puts "repositories command ran"
    end
end

#
# Postprocess commands + error handling
#
post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
end

on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
end

#
# Main
#
exit run(ARGV)
